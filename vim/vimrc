" lhchavez

" Local overrides {{{

if filereadable(expand('~/.vimrc_local'))
    source ~/.vimrc_local
endif

" }}}
" Plugins {{{

set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Let Vundle manage itself
Plugin 'VundleVim/Vundle.vim'

" Sensible defaults.
Plugin 'tpope/vim-sensible'

Plugin 'rking/ag.vim'
let g:ag_working_path_mode="r"

Plugin 'sjl/gundo.vim'

Plugin 'ctrlpvim/ctrlp.vim'

Plugin 'FelikZ/ctrlp-py-matcher'

Plugin 'tpope/vim-abolish'

Plugin 'tpope/vim-fugitive'

Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

Plugin 'derekwyatt/vim-scala'

Plugin 'scrooloose/nerdtree'

Plugin 'scrooloose/syntastic'

Plugin 'w0ng/vim-hybrid'

Plugin 'fatih/vim-go'

Plugin 'rdnetto/YCM-Generator'

Plugin 'posva/vim-vue'

Plugin 'leafgarland/typescript-vim'

Plugin 'rust-lang/rust.vim'
let g:rustfmt_autosave = 1

Plugin 'easymotion/vim-easymotion'

if filereadable(expand('~/.vimrc_ycm'))
  source ~/.vimrc_ycm
endif

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

" }}}
" gVim settings {{{

if has('gui_running')
    set guifont=Luculent\ 10
endif

" }}}
" Colors {{{

if exists("g:disable_truecolor") && g:disable_truecolor
    set t_Co=256
    let g:hybrid_custom_term_colors = 1
else
    " Magic incantations to get the correct terminal escapes, regardless of
    " terminal. Needs vim 7.4.1799+.
    set t_8f=[38;2;%lu;%lu;%lum
    set t_8b=[48;2;%lu;%lu;%lum
    set termguicolors
endif

set background=dark
colorscheme hybrid
let g:airline_powerline_fonts = 1
let g:airline_theme='hybrid'
syntax enable                " enable syntax processing

" }}}
" Misc {{{

" highlight last inserted text
nnoremap gV `[v`]             

set encoding=utf-8            " Unicode

" Typo-fixer
:command! WQ wq
:command! Wq wq
:command! W w
:command! Q q

" Better tags handling
set tags=./tags;/

" }}}
" Spaces & Tabs {{{

set tabstop=2                " number of visual spaces per TAB
set softtabstop=2            " number of visual spaces per TAB
set shiftwidth=2
set list

" }}}
" UI Layout {{{

set number              " show line numbers
set showcmd             " show command in bottom bar
set wildmode=list:longest,full
set lazyredraw          " redraw only when we need to.
set showmatch           " highlight matching [{()}]

set scrolloff=5         " keep at least 5 lines above/below
set sidescrolloff=5     " keep at least 5 lines left/right

" }}}
" Searching {{{

set hlsearch            " highlight matches
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>
set ignorecase          " Case-insensitive search
set smartcase           " But switch to case-sensitive if you add an uppercase

" }}}
" Movement {{{

" make cursor move as expected with wrapped lines
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" Ctrl+arrows navigates through windows
map <ESC>[D <ESC><C-w>h
map <ESC>[B <ESC><C-w>j
map <ESC>[A <ESC><C-w>k
map <ESC>[C <ESC><C-w>l
map! <ESC>[D <ESC><C-w>h
map! <ESC>[B <ESC><C-w>j
map! <ESC>[A <ESC><C-w>k
map! <ESC>[C <ESC><C-w>l

" make ctrl+cursor move through window panes.
map <ESC>[1;5D <ESC><C-w>h
map <ESC>[1;5B <ESC><C-w>j
map <ESC>[1;5A <ESC><C-w>k
map <ESC>[1;5C <ESC><C-w>l
map! <ESC>[1;5D <ESC><C-w>h
map! <ESC>[1;5B <ESC><C-w>j
map! <ESC>[1;5A <ESC><C-w>k
map! <ESC>[1;5C <ESC><C-w>l

" }}}
" Leader Shortcuts {{{

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

" edit vimrc/bashrc and load vimrc bindings
nnoremap <leader>rve :vsp $MYVIMRC<CR>
nnoremap <leader>rvs :source $MYVIMRC<CR>
nnoremap <leader>rbe :vsp ~/.bashrc<CR>
nnoremap <leader>rte :vsp ~/.tmux.conf<CR>

" save session
nnoremap <leader>s :mksession<CR>

" open ag.vim
nnoremap <leader>a :Ag 

" YCM GoToDefinition
nnoremap <leader>] :YcmCompleter GoToDefinition<CR>

" Pretty-print JSON
nnoremap <leader>j :%!python -m json.tool<CR>:set syntax=json<CR>

" }}}
" CtrlP {{{

" CtrlP settings
let g:ctrlp_match_window = 'bottom,order:ttb'
let g:ctrlp_switch_buffer = 0

" Do not clear filenames cache, to improve CtrlP startup
" You can manualy clear it by <F5>
let g:ctrlp_clear_cache_on_exit = 0

" Set no file limit
let g:ctrlp_max_files = 0

if !exists("g:ctrlp_working_path_mode")
    " Limit CtrlP to the ancestor with a '.git' directory.
    let g:ctrlp_working_path_mode = 'ra'
endif

" Set delay to prevent extra search
let g:ctrlp_lazy_update = 350

" ag is much faster than the regular command.
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
          \ --ignore .git
          \ --ignore .svn
          \ --ignore .hg
          \ --ignore .DS_Store
          \ --ignore "**/*.pyc"
          \ --ignore .git5_specs
          \ --ignore review
          \ -g ""'
endif

if !exists("g:ctrlp_working_path_mode")
    " CtrlPMixed is much more useful than regular CtrlP
    let g:ctrlp_cmd = "CtrlPMixed"
    " But it needs this otherwise you get a bunch of files
    " outside the repo.
    let g:ctrlp_mruf_relative = 1
endif

" PyMatcher for CtrlP. This speeds up matching considerably.
if !has('python') && !has('python3')
    echo 'In order to use pymatcher plugin, you need +python compiled vim'
else
    let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
endif

set wildignore+=*.class,.git

" }}}
" NERDTree {{{

" Invoke NERDTree
map <C-n> :silent call <SID>NERDTreeToggle()<CR>

" Close vim if the only window left is NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" }}}
" Syntastic {{{

let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:syntastic_stl_format="L%F"

" }}}
" AutoGroups {{{

augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd BufWritePre *.php,*.py,*.js,*.vue,*.tpl,*.txt,*.hs,*.java,*.md :call <SID>StripTrailingWhitespaces()
    autocmd FileType tpl setlocal expandtab
    autocmd FileType tpl setlocal tabstop=2
    autocmd FileType tpl setlocal shiftwidth=2
    autocmd FileType javascript setlocal expandtab
    autocmd FileType javascript setlocal tabstop=2
    autocmd FileType javascript setlocal shiftwidth=2
    autocmd FileType smarty setlocal expandtab
    autocmd FileType smarty setlocal tabstop=2
    autocmd FileType smarty setlocal shiftwidth=2
    autocmd FileType php setlocal expandtab
    autocmd FileType php setlocal tabstop=4
    autocmd FileType php setlocal shiftwidth=4
    autocmd FileType java setlocal tabstop=4
    autocmd FileType java setlocal shiftwidth=4
    autocmd FileType java setlocal textwidth=100
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd BufEnter Makefile setlocal tabstop=8
    autocmd BufEnter Makefile setlocal shiftwidth=8
    autocmd BufEnter *.sh setlocal tabstop=2
    autocmd BufEnter *.sh setlocal shiftwidth=2
    autocmd BufEnter *.sh setlocal softtabstop=2
    autocmd BufEnter *.vue setlocal expandtab
    autocmd BufEnter *.vue setlocal tabstop=2
    autocmd BufEnter *.vue setlocal shiftwidth=2
augroup END

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" }}}
" Backups {{{

set nobackup       " no backup files
set nowritebackup  " only in case you don't want a backup file while editing
set noswapfile     " no swap files

" }}}
" Custom Functions {{{

" strips trailing whitespace at the end of files. this
" is called on buffer write in the autogroup above.
function! <SID>StripTrailingWhitespaces()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    let @/=_s
    call cursor(l, c)
endfunction

" invokes prettier on the current buffer
function! <SID>Prettier()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    %!prettier --single-quote --trailing-comma es5
    let @/=_s
    call cursor(l, c)
endfunction

" invokes yapf on the current buffer
function! <SID>Yapf()
    " save last search & cursor position
    let _s=@/
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    %!yapf
    let @/=_s
    call cursor(l, c)
endfunction

" toggles NERDTree, focusing the current buffer if not shown.
function! <SID>NERDTreeToggle()
    if g:NERDTree.IsOpen()
        call g:NERDTree.Close()
    else
        :NERDTreeFind
    endif
endfunction

" }}}
" Formatting {{{

let g:clang_format_path = '/usr/bin/clang-format'
if has('python3')
    map <C-I> :py3f ~/dotfiles/vim/clang-format.py<CR>
    nnoremap <leader>fc :%py3f ~/dotfiles/vim/clang-format.py<CR>
elseif has('python')
    map <C-I> :pyf ~/dotfiles/vim/clang-format-2.py<CR>
    nnoremap <leader>fc :%pyf ~/dotfiles/vim/clang-format-2.py<CR>
endif

nnoremap <leader>fp :silent call <SID>Prettier()<CR>
nnoremap <leader>fy :silent call <SID>Yapf()<CR>

" }}}
" per-project .vimrc {{{

set exrc
set secure

" }}}

" vim:foldmethod=marker:foldlevel=0:tabstop=4:shiftwidth=4:expandtab
